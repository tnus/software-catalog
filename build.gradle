//plugins {
//  id 'org.asciidoctor.convert' version '1.5.7' apply false 
//}

//plugins { 
//	id "io.spring.dependency-management" version "1.0.4.RELEASE" 
//}

//plugins {
//  id 'org.asciidoctor.convert' version '1.5.7' apply false
//}  

plugins {
//  id 'org.asciidoctor.convert' version '1.5.7' apply false
  id "com.ewerk.gradle.plugins.querydsl" version "1.0.9" apply false
}  

allprojects {
    repositories {
        mavenLocal()
	    maven {	    
	        url "http://149.249.4.101/artifactory/repo"
	    }     	
    	mavenCentral() 
    }
}

subprojects {
    version = '0.0.1-SNAPSHOT'
    group = 'de.nuss.software.catalog'
    
    ext { 
    	springBootVersion = '1.5.9.RELEASE'
    	querydslVersion = '4.1.4'
    	vaadinVersion = '8.2.0'
    }
    
	buildscript {
	    repositories { 
	    	jcenter()
	        mavenLocal()
		    maven {
		      url "https://plugins.gradle.org/m2/"
		    }	        
		    maven {
		        url "http://149.249.4.101/artifactory/repo"
		    }     	
	    	mavenCentral()  
	    }
		dependencies {
		 		classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.7"
		        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
		        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	    }	    
	}    
	
    repositories { 
    	jcenter()
        mavenLocal()
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
	    maven {	    
	        url "http://149.249.4.101/artifactory/repo"
	    }     	
    	mavenCentral()  
    }
    
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'project-report'
//	apply plugin: 'org.asciidoctor.convert'
	
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
	}
	
	artifacts {
	    archives sourcesJar
	    archives javadocJar
	}
	
	
    // Disable the test report for the individual test task
    test {
        reports.html.enabled = true
//        testLogging {
//        	events "passed", "skipped", "failed"
//    	}
    }    
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}